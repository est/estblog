<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>est の 输入输出</title><link>https://blog.est.im/</link><description>This blog is rated 🔞, viewer discretion is advised</description><lastBuildDate>Tue, 13 Aug 2024 16:16:00 +0800</lastBuildDate><item><title>大清卷王 和 骑士</title><link>https://blog.est.im/2024/stdin-12</link><description>&lt;p&gt;看到个推：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;蕨代霜蛟 &lt;a href="https://x.com/ferntrino/status/1823188040317341731"&gt;@ferntrino 10:41 AM · Aug 13, 2024&lt;/a&gt;&lt;br /&gt;
杭州抗议骑手事件本身就不参与讨论了，难受的是自己的。但有一个细节真的非常黑色素幽默，那就是名单列表顶上的字段。系统命名时还真随手就把骑手的ID命名为Knight ID。&lt;br /&gt;
卧槽，Knight这么有历史感的单词竟然落魄卑贱到了这个地步。&lt;br /&gt;
&lt;img referrerpolicy="no-referrer" src="https://pbs.twimg.com/media/GU1D21MaoAAu8_6?format=jpg&amp;name=medium" /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knight这单词恰好激活了我查证的一个事：&lt;/p&gt;
&lt;p&gt;每年五一放假，这是因为&lt;a href="https://blog.est.im/2021/stdout-026"&gt;国际劳动节&lt;/a&gt; 。这个洋节还tmd是美国人发明的。具体来说是 1886年5月4号发生在北美 伊利诺伊州 芝加哥市 的 Haymarket Square&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Site_of_the_Haymarket_Riot_%287199922756%29.jpg/800px-Site_of_the_Haymarket_Riot_%287199922756%29.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这一被称为 &lt;a href="https://en.wikipedia.org/wiki/Haymarket_affair"&gt;Haymarket affair&lt;/a&gt; 草市事件 的发起者，名字就叫 Knights of Labor，劳工骑士团 。看来骑士这名字不但不卑微，而且和劳动人民关系非常密切嘛。而且这缩写叫。。。。KOL。哈哈哈。。。劳动人民应改理直气壮的当意见领袖，没毛病。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Powderly-terence-1890.jpg/220px-Powderly-terence-1890.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;图：高贵与神圣的劳工骑士团 Grand Master Workman: Terence Powderly&lt;/p&gt;
&lt;p&gt;无聊翻资料，发现一些有趣的细节&lt;/p&gt;
&lt;p&gt;KOL在1886年5月1日这场运动是在1884年筹备的，主要诉求是8小时工作制。注意国内很多厂家把中午吃饭小休的时间排除在8小时之外，这里显然扯蛋。当年8小时工作的完整表述是：&lt;strong&gt;8小时打工，8小时睡眠，其余8小时归自己管！&lt;/strong&gt; 当年罢工这首颂歌 &lt;em&gt;Eight Hour&lt;/em&gt; 就是这么唱的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eight Hours for work. Eight hours for rest. Eight hours for what we will&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看下B站的搬运 &lt;a href="https://www.bilibili.com/video/BV1qt411z7Te/"&gt;【中英字幕】八小时之歌 Eight hours&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;草市事件是工人运动的辉煌顶点，拉开了后续 &lt;a href="https://en.wikipedia.org/wiki/Great_Railroad_Strike_of_1877"&gt;Great Upheaval（也称 Great Railroad Strike of 1877）&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;说回骑士团历史，KOL强调不分宗教、种族、性别互帮互助，主要成员是低技能体力劳动者、铁路工人、移民、和钢铁工人。但是排斥五类人： bankers, land speculators, lawyers, liquor dealers and gamblers 金融、地产、律师、酒精和赌博。因为这些从业者被认为不对社会产生价值。哈哈哈&lt;/p&gt;
&lt;p&gt;骑士团吸纳了很多天主教/新教爱尔兰人。然后。。。。。。然后骑士团在还跟 chinese 干上了。据说是在北美西岸的Tacoma，这里1/10人口都是Union Pacific Railroad的劳工——来自东亚大清的卷王们。骑士团要求罢工，大清卷王们不干，最后搞成了种族冲突，结局就是 Rock Springs massacre 石泉屠杀。1882年，骑士团支持了臭名昭著的 Chinese Exclusion Act。骑士团所谓的“不分种族、支持移民”都被加上了 (chinese除外) 的标签&lt;/p&gt;
&lt;p&gt;1886顶点的结束，KOL迅速衰败了。被 American Federation of Labor 代替，原因是理念落后，熟练工和无技能功能的诉求差异，被天主教主教谴责导致占比很大的天主教徒离开。 &lt;/p&gt;
&lt;p&gt;1889年，在巴黎举行的第二国际第一次会议上，法国工会人士 Raymond Lavigne 提议将5月1日定为国际劳工节，以纪念草市场事件，同时要求各国的劳工共同努力，为八小时工作制而奋斗[5]。拉维涅的议案激励了美国和欧洲多数国家的劳工在1890年5月1日再次进行罢工&lt;/p&gt;
&lt;p&gt;1904年，第二国际在阿姆斯特丹的会议上号召“各国社会民主党组织和工会联合会都要在每年五月一日坚决要求从法律上规定八小时工作制，拥护无产阶级的阶级要求和拥护世界和平”。大会还责成“各国的无产阶级组织，凡在有条件于五月一日停工而无损于工人利益的地方，应当争取停止工作”&lt;/p&gt;
&lt;p&gt;历史就是这么奇妙。。。或许人们在人挤人的 51 出游，早已忘记这个节日是怎么来的，诉求是什么，以及大清卷王如何被动在错位时代把劳动关系演变成种族冲突的。。。在&lt;a href="https://blog.est.im/202010/stdin-014"&gt;996问题&lt;/a&gt;、失业问题夹杂的社会主义国家里，一切都是那么的神奇甚至讽刺。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Tue, 13 Aug 2024 16:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-08-13:/2024/stdin-12</guid><category>stdin</category></item><item><title>两则故事：Intel Minnow，日本高分子化学</title><link>https://blog.est.im/2024/stdin-11</link><description>&lt;p&gt;&lt;a href="https://www.zhihu.com/question/663238830/answer/3582110938"&gt;英特尔第二财季营收低于预期，第四财季暂停派息，公司将裁员超1.5万人，盘后股价大跌20%，如何解读？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;老狼&lt;/code&gt; 2021 年度新知答主 雨花、yang元祐 等 946 人赞同了该回答&lt;br /&gt;
前大樱桃员工来回答一下个人的观点。Intel是个好公司，对员工的尊重和职业路径的培养，公司上下对技术的推崇，宽松的企业文化，可以说是绝大多数国内外公司所不能比拟的。尽管有很多人因为各种各样的原因离职了，也在各种前员工群里面各种吐槽，但都是小骂大帮忙，主要是哀其不幸，怒其不争，对Intel从心底还是希望它好的。这么个好公司，为什么越来越不行了呢？&lt;br /&gt;
Intel逐渐崩盘的开始点在于10nm的难产，从那以后就没有再好过，只有一蟹不如一蟹。病发于工厂（Fab），根子则是美国制造不行了。一个前美国同事告诉我，美国人丢失了“CAN DO”的精神，只能做高端的设计、娱乐、金融这种营生，苦哈哈的制造不愿意干了，逼着干也干不了。&lt;br /&gt;
曾经发生的一件事，可以一窥美国制造的窘境。我的团队和美国Peer团队一起合作了几个开源硬件项目，这对Intel非常重要，我们计划建立x86的类似树莓派硬件矩阵，但是更加开放，这个项目就是Minnow计划。Minnow的第二代Minnow Max（基于Baytrail）非常成功，其中一个很大原因，就是我们选取了ADI做硬件供应商，而ADI的产线在深圳，主板质量非常好，避免了一代老化测试没有做，生命周期太短的问题。我们打算趁热打铁，推出Minnow3，选择在当时颇有竞争力的APL CPU，价格看能不能做到100美金左右。&lt;br /&gt;
计划开始就不太顺利，硬件设计被美国team抢走了，他们非要选择一个美国小厂来生产。在付出了延迟半年的等待后，硬件工程师终于告诉我们下周就可以回板了，我们都非常兴奋。结果，又等了三个月，才正在拿到几片板子（首批应该拿到十几片），而且根本跑不到GOP驱动那里，感觉是高速总线信号有问题。开会时，美国的PM（韩国人）告诉我们一个惊人的消息，说那个小厂生产了一百片板子，没有一个可用，我们的硬件工程师（一个年轻的老美）被迫自己到产线上用焊枪手搓主板，这几片就是他几周手搓出来的！他的毅力让我佩服（手搓主板仙人？），但还是不能用啊，谁让你换美国小厂的？于是我们每次项目周会都会催他啥时候能给我们可用的主板，过了几周，他从此再也没有在周会上出现。&lt;br /&gt;
项目于是又停滞了几个月，我们催PM，PM告诉我们他找不到这个工程师了，就是他的经理也不知道他去哪里了，就差要报警了。就在我以为过一阵就要换个硬件工程师的时候，事情发生了令人瞠目结舌的转折。&lt;br /&gt;
各位看管，这里有一个好消息，和一个坏消息，你们想先听哪个？好吧，好消息是硬件工程师找到了，坏消息是硬件工程师将公司告了！说因为我们总是催他进度，导致他患上了严重的抑郁症，有工伤了，现在不能好好工作，一周只能去一天公司。我心里一万个草泥马跑过，我一周和颜悦色的问一下进度（我又不是他领导，也严厉不起来），从来没有投诉他，这都能搞成工伤，是不是温室里的花朵？&lt;br /&gt;
关键是他的工伤被认可了。从此，我和PM再也不能问他进行到哪里了，可笑的是，我们既不能把他踢出项目组，也不能换个硬件工程师，这个活还必须是他干，而且还不能另起炉灶，再成立一个项目组。按照律师的说法，必须Inclusive到他。他的经理也不能辞退他，更不能给低绩效，从此有个防弹衣。他的经理从此拖了一个油瓶，在此可怜他一秒。更重要的事，项目周会从之谈风花雪月，到没人记得参加。项目再延期一年后，迎来了它的结局，无疾而终，而我从此告别了开源硬件梦。&lt;br /&gt;
这是Intel的问题吗？不，是美国的体制问题，尽管美国还拥有全世界最顶尖的人才，美国制造也永远不可能回到过去的辉煌。Intel现在扛下了美国制造的脸面，必须负重前行，但我们都知道，在路的尽头，只有特朗普的白日梦。&lt;br /&gt;
编辑于 2024-08-03 23:15・IP 属地上海&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/554942569/answer/3574789969"&gt;日本企业是否已经整体夕阳西下了？&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Osteroza&lt;/code&gt; 键盘侠，接盘侠，洗盘侠 1916 人赞同了该回答&lt;br /&gt;
我说一个可能化工行业的同仁们知道的趣事。&lt;br /&gt;
美国化学家 P J Flory 是高分子化学的大师级人物，他本人获得过1974年的诺贝尔化学奖。&lt;br /&gt;
然而，Flory在晚年的许多“成就”其实是大坑，特别是涉及晶体振荡领域，他的一些结论是错误的。&lt;br /&gt;
在六十到七十年代，不少日本化学家师从Flory。这些化学家日后成为了日本化学领域的大佬级人物，决定了日本高分子化学领域的研究方向。这些大佬们继承了Flory的研究成果，包括错误的部分。在他们的带领下，直到今天，日本化工界的许多研究，依然是沿着Flory的模型一路狂奔!&lt;br /&gt;
而欧美化学界早在90年代就开始批判Flory。在这位老大哥的家乡，美国，他在大分子晶体领域的学说被“全盘反思”，今天的美国化学界没有机构会继续沿着错误的理论搞科研。&lt;br /&gt;
然而，这不妨碍日本化学界，物理界和工业界，年复一年的派学者前来美国进修，重复着一位位前辈们的实验，佐证Flory派模型的正确。只要Flory模型是正确的，也就说明当代日本化学高分子界老师们的正确，也就是证明日本化学界自七十年代来所有前辈们的努力是正确的。&lt;br /&gt;
这个行为在我这个外行看来，可以有三种解读: 1，美国实验室知道真相但忽悠日本人，反正你自愿交钱来做实验。2，日本人很固执，死不认错。3，如果最终证明日本人是正确的，那么日本人就是逆行的孤勇者。&lt;br /&gt;
事情怎么发生变化的呢。在某次物理年会上，美国国家标准局和阿克郎大学发难，派了个年轻的博士后上场，说你们日本人前段时间又来做Flory模型的实验了，据说数据很完美，你们工业界也重复了实验，数据也很完美，是不是？&lt;br /&gt;
鉴于你们实验年复一年的数据都很完美，我们很好奇，所以也做了你们的实验，结果发现了不少的问题。现在我就一条条，一步步的列出来，你们的实验每一步都有哪些问题。我们初衷是同行们间的学术交流哇，大家好好讨论一下哦。&lt;br /&gt;
讨论结果是，日本人之后再也不来参加这个物理年会了。&lt;br /&gt;
我一位高中同学当时在Akron读博，他听说这事儿以后就问了他的美国导师，“我们是不是杀死了日本人的一个行业”。他的导师回答“不，我们是给一具尸体照了次镜子”。&lt;br /&gt;
而我另一位在日本留学读博的中学同学说“日本人每次参加学术会议都一大堆人，但通常只有大佬做关键发言，小辈们发言后都要加上点感谢大佬的致辞。米帝让一个三十几岁的小辈直接怼德高望重大佬们，大佬们恐怕心境上也很难接受吧。”&lt;br /&gt;
你们觉得日本人被打脸后，默默改正了错误吗？&lt;br /&gt;
虽然，但是，如此，然而，日本学界依旧每年派人来美国实验室刷数据，继续论证Flory的模型是正确的! 日本工业界也依旧以flory的模型为基础，孜孜不倦的推进研发工作。&lt;br /&gt;
发布于 2024-07-27 01:23・IP 属地英国&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不知道是刚编的故事，还是真就这么草台。。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Mon, 05 Aug 2024 17:56:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-08-05:/2024/stdin-11</guid><category>stdin</category></item><item><title>关于 cn.cyberIdentity.certification 的一些技术信息</title><link>https://blog.est.im/2024/stdout-15</link><description>&lt;p&gt;搜索该app名字可以得到 &lt;/p&gt;
&lt;p&gt;&lt;a href="https://apps.apple.com/cn/app/_/id1588080869"&gt;https://apps.apple.com/cn/app/_/id1588080869&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各大app市场都有隐私政策页，点击可以发现网址是：&lt;/p&gt;
&lt;p&gt;https://cdnrefresh.ctdidcii.cn/w1/WHClient_H5/pages/secret.html&lt;/p&gt;
&lt;p&gt;甚至有一个 apk 下载页面&lt;/p&gt;
&lt;p&gt;https://cdnrefresh.ctdidcii.cn/w1/WHClient_H5/Install/InstallGuide.html&lt;/p&gt;
&lt;p&gt;https://cdnrefresh.ctdidcii.cn/w1/version/cyberIdentity-android.apk&lt;/p&gt;
&lt;p&gt;&lt;code&gt;whois ctdidcii.cn&lt;/code&gt; 可以得到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Registrant: XX部第一研究所&lt;br /&gt;
Registrant Contact Email: songjie@anicert.cn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以发现该公司官网&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有限公司（以下简称“ZDAX”）是&lt;code&gt;**部&lt;/code&gt;第一研究所下属全资子公司。&lt;br /&gt;
&lt;code&gt;**部&lt;/code&gt;第一研究所以国家“互联网+”可信身份认证平台（简称“CTID平台”）核心技术为依托，致力于为各级政府部门、互联网运营商、各行业应用提供权威、可信、安全、便捷的身份认证服务，并开展相关业务创新。在&lt;code&gt;**部&lt;/code&gt;的直接领导下，&lt;code&gt;**办&lt;/code&gt;、国家发改委、科技部等部委的大力支持下，&lt;code&gt;**部&lt;/code&gt;第一研究所积极开展居民身份证网上应用研究，组织承建CTID平台，助力新时代社会治理现代化。&lt;br /&gt;
2017年10月，&lt;code&gt;**部&lt;/code&gt;第一研究所成立ZDAX公司，并授权ZDAX为CTID平台唯一合法的运营服务商，为各行业提供权威、可信、安全、便捷的网络身份认证服务，为我国“互联网+行动战略”提供强有力的支撑保障。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及平台介绍说明&lt;/p&gt;
&lt;p&gt;https://www.anicert.cn/platform.html&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;● 一次一码，超时失效&lt;br /&gt;
● 通过国密算法加密、签名防止数据泄露、篡改和伪造&lt;br /&gt;
根据相关行政许可设立的第三方签发、面向系统应用可作为司法采证使用的身份凭证，如电子认证服务提供者、CA机构等第三方签发的电子签名认证证书、eID等；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;得出一个结论，这玩意不&lt;em&gt;仅&lt;/em&gt;是eID换皮那么简单。&lt;/p&gt;
&lt;p&gt;点开发展历程可以看到 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020.12 《&lt;a href="https://www.anicert.cn/upload/2020/12/25/16088934002753h4n2m.pdf"&gt;基于可信数字身份的区块链应用服务白皮书&lt;/a&gt;》正式发布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面提到的厦门公司，看上去是专门做 CDIT 运营的，搜了下官网是&lt;/p&gt;
&lt;p&gt;https://easyctid.cn/about&lt;/p&gt;
&lt;p&gt;其中有一张最重要的架构图&lt;/p&gt;
&lt;p&gt;&lt;img referrerpolicy="no-referrer" src="https://easyctid.cn/_nuxt/img/bg-3.c5fe831.png" /&gt;&lt;/p&gt;
&lt;p&gt;目前不知道这个 PID 是唯一的还是可变的。要实用还是得做类似微信那种 OpenID/UnionID 才行。因为技术对接SDK需要付费签协议才能拿到，细节就无从而知了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Thu, 01 Aug 2024 15:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-08-01:/2024/stdout-15</guid><category>stdout</category></item><item><title>Valid HTTP verbs</title><link>https://blog.est.im/2024/stdout-14</link><description>&lt;p&gt;从&lt;a href="https://www.v2ex.com/t/1057881"&gt;这里&lt;/a&gt; 想到，fetch/xhr 可以发起哪些 http verb 呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m http.server&lt;/code&gt; 随手测试了下，发现连 &lt;code&gt;!&lt;/code&gt;，&lt;code&gt;$&lt;/code&gt; 这种符号都可以作为 http verb，比如 &lt;code&gt;fetch('/asdf', {method:"$"})&lt;/code&gt; 这样的请求是能发起的。于是去 chromium 搜了下 &lt;code&gt;"is not a valid HTTP method"&lt;/code&gt; 相关的解析放在 &lt;a href="https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/platform/network/http_parsers.cc;drc=fa1e0cf5238e2600039f60af6909aefbd4cf003c;l=404"&gt;blink/renderer/platform/network/http_parsers.cc&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// See RFC 7230, Section 3.2.6.
bool IsValidHTTPToken(const String&amp;amp; characters) {
  if (characters.empty())
    return false;
  for (unsigned i = 0; i &amp;lt; characters.length(); ++i) {
    UChar c = characters[i];
    if (c &amp;gt; 0x7F || !net::HttpUtil::IsTokenChar(c))
      return false;
  }
  return true;
}

bool HttpUtil::IsTokenChar(char c) {
  return !(c &amp;gt;= 0x7F || c &amp;lt;= 0x20 || c == '(' || c == ')' || c == '&amp;lt;' ||
           c == '&amp;gt;' || c == '@' || c == ',' || c == ';' || c == ':' ||
           c == '\\' || c == '"' || c == '/' || c == '[' || c == ']' ||
           c == '?' || c == '=' || c == '{' || c == '}');
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原来如此，RFC 7230呀。于是把这些字符打出来：&lt;code&gt;' '.join(chr(x) for x in range(0x20, 0x7f))&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;! # $ % &amp;amp; ' * + - . 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z | ~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那还搞个屁的 RESTful 啊。直接用特殊符号一把梭。不过各种服务端框架可能不是很容易做兼容。哈哈。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Wed, 17 Jul 2024 09:47:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-07-17:/2024/stdout-14</guid><category>stdout</category></item><item><title>Cappy in a Haystack locations</title><link>https://blog.est.im/2024/stdout-13</link><description>&lt;p&gt;For &lt;a href="https://fallout.fandom.com/wiki/Cappy_in_a_Haystack"&gt;the mission&lt;/a&gt; from the beloved Fallout 4 Nuka-World DLC&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;coc DLC04KiddieKingdomFunHouse01; player.moveto 06015A94
coc NukaWorldWildWestExt02; player.moveto 06015A8A
coc DLC04BottlingPlant01; player.moveto 060445DF
coc DLC04BottlingPlant01; player.moveto 0604A812
coc DLC04GalacticZoneExt04; player.moveto 06015A8E
coc DLC04GalacticZoneExt04; player.moveto 0604AD3F
coc DLC04GalacticZoneExt08; player.moveto 06015A91
coc DLC04GalacticZoneExt08; player.moveto 0604AD40
coc DLC04KiddieKingdomFunHouse01; player.moveto 0604AD3D
coc DLC04WWMineCart01; player.moveto 06015A8B
coc DLC04WWMineCart01; player.moveto 0604AA39
coc KiddieKingdomExt06; player.moveto 06015A97
coc KiddieKingdomExt06; player.moveto 0604AD3E
coc NukaWorldNukaTownUSA06; player.moveto 0604A814
coc NukaWorldNukaTownUSA06; player.moveto 0604A813
coc NukaWorldWildWestExt02; player.moveto 0604A815
coc SafariAdventure03; player.moveto 06015A9A 
coc SafariAdventure03; player.moveto 0604AA3A
coc SafariAdventure07; player.moveto 06015A9D
coc SafariAdventure07; player.moveto 06015A9D
coc SafariAdventure07; player.moveto 0604AA3B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;idk hope it works lol.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Sat, 13 Jul 2024 09:19:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-07-13:/2024/stdout-13</guid><category>stdout</category></item><item><title>All Star Core locations in Fallout 4</title><link>https://blog.est.im/2024/stdout-12</link><description>&lt;p&gt;Arent nobody got time for this shit.&lt;/p&gt;
&lt;p&gt;Open FO4Edit, locate &lt;code&gt;604a053&lt;/code&gt; and find all refs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0601FAD1
060255A7
060255D2
06025774
060257F1
06026C7B
06026D23
06026D70
060278F7
06027917
0602791A
06027A3C
06027ACC
06027C0D
06027D5E
06027E43
06027E4C
060319E1
060319E2
060327BA
060327C4
060327D0
060327E2
06034EC6
06034F97
06034FD4
0603522E
06037CA7
060380CB
0603816F
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for external star cores, locate &lt;code&gt;0601F0E5&lt;/code&gt; and &lt;code&gt;0601F0E6&lt;/code&gt; for more refs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;coc NWJunkyardExt; player.moveto 060319D6;
coc NukaWorldWildWestExt03; player.moveto 06031995;
coc DLC04BottlingPlant01; player.moveto 060319CE;
coc DLC04Nukacade01; player.moveto 060319CF;
coc DLC04GalacticZoneExt07; player.moveto 060319E1;
coc NukaTownMarket01; player.moveto 06054CA8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just type &lt;code&gt;player.moveto&lt;/code&gt; with the code above and you can grab all &lt;a href="https://fallout.fandom.com/wiki/Star_core"&gt;star cores&lt;/a&gt;, and return to console &lt;code&gt;player.moveto 0601E359&lt;/code&gt;, so you get the Quantum X-01 power armor from Nuka-World DLC of Fallout 4.&lt;/p&gt;
&lt;p&gt;Also there's &lt;code&gt;coc TestCory01; 06044B4B;&lt;/code&gt; for testing purposes.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Sat, 13 Jul 2024 06:31:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-07-13:/2024/stdout-12</guid><category>stdout</category></item><item><title>育儿成本的两座大山</title><link>https://blog.est.im/2024/stderr-13</link><description>&lt;p&gt;仅个人观点&lt;/p&gt;
&lt;h3&gt;校园里的义务教育&lt;/h3&gt;
&lt;p&gt;首先，我支持义务教育的普惠性。现代各国的义务教育，也就是K12教育，可以覆盖从5-6岁的幼儿园（K）到高中（12年级）。教育当然是非常有必要的而且最好强制性的，但是一定要关起门来在封闭校园里受教育吗？&lt;/p&gt;
&lt;p&gt;这套体系的义务性，源自于普鲁士的士官传统和军营教育。当年这事儿出发点没啥问题，但是到21世纪的大城市里，成为城镇居民育儿最大的负担。经费问题先不说，首先就是接送问题。上学、放学这个时间问题就至少要耗费一个成年劳动力脱产，校车制度和孩子自行出门回家基本看不到可行性。&lt;/p&gt;
&lt;p&gt;如果你给孩子辅导过作业就会发现，现在的统编教材是反智、反自学、反人类的。老师每天发的各种填表、通知比学科本身问题还多。城镇的孩子早就高度个性化差异化成长了，学习进度反而非常僵硬死板。成绩差的跟不上，成绩好的无法掌握更高级的知识。整天都是一个流水线作业和非标件不适配的拉扯。&lt;/p&gt;
&lt;p&gt;抱着「干不好就别干」的心态，在资讯如此发达的今天，我觉得应该把「义务」，改成 opt-out 模式。也就是对于有条件的家长，只要教育部门能把控最终毕业会考成绩就行，而不是必须按学籍在指定学校坐满9年板凳。的允许民间办学和home-school按照自己的节奏去学习和成长。到了法定年龄，不能通过会考的，做一些处罚或者补救措施。&lt;/p&gt;
&lt;p&gt;当然有人会说了，这样搞，会不会乱套？不利于集体生活，不利于团结稳定。这样的问题当然存在，可以小范围试点，按地区不同政策嘛。归根结底这是ruling class需要考虑的事，各位要杠，我只能说京爷您说的对。&lt;/p&gt;
&lt;h3&gt;“童工”问题&lt;/h3&gt;
&lt;p&gt;我觉得，孩子要么纯学习，要么纯玩，这种二元生活持续整个童年是有害的。更好的方式是，在劳动中学习，在实践中收获回报和经验。说得好听点，支持“勤工俭学”。说的更通俗点难听点，就是应该允许“童工”。这个话题可能会造成很多人敏感和不适，但是先别急。童工的准确定义，是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;剥削性质的劳动导致孩子无法获得教育，或者精神/身体/社会/道德 上受到侵害。&lt;br /&gt;
the exploitation of children through any form of work that interferes with their ability to attend regular school, or is mentally, physically, socially and morally harmful&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在发达地区要找一个体力剥削活儿也不太可能了，重体力活儿，你身子板儿不行，雇主还会嫌弃你。&lt;/p&gt;
&lt;p&gt;反而是儿童的心理、社会压力很大。其中一个原因就是青春期那股劲儿没地方释放。所有的回报和赏赐都来自老师或者父母。老师和父母是典型的绝对权威，从原理上来说就是不平等沟通，诉求有不可调和的矛盾。这种人造的依附关系是高高在上、理性铸就然而架空的幻觉，这座精心维护的象牙塔会在孩子毕业那一刻轰然倒塌。孩子真正进入社会会有一种「原来是这么回事」的幻灭感。如果说高考填自愿是几乎茫然的状态去碰运气，那么应届生选择岗位更像一场赌。&lt;/p&gt;
&lt;p&gt;这个问题放在长远的人类历史压根就不是问题。自古以来，孩子都是跟着父母叔伯学习生存技能的，一个家庭本质就是一个小产业群体；脱产的学校，这玩意是近现代产物。龙生龙凤生凤，老鼠的儿子会打洞，子承父业这看起来是天经地义的事。现代很多职业分工是非常精细以至于达到变态的程度，孩子要直接上手父母的职业几乎不可能，更多依赖长久的教育和培养。&lt;/p&gt;
&lt;p&gt;农村的孩子一般从下地就开始干农活儿，城镇的娃从小接触商业那也是理所应当，甚至是必须的。比如父母开了店，孩子在暑假帮忙照看一下是很常见的。这些显然不算「童工」。基于类似的道理，没开店的家庭，支持自己娃从事一些差事，能获得一点物质回报，经历一些at stake的挣钱、交易、谈判技能肯定比看电视傻笑强。&lt;/p&gt;
&lt;p&gt;国内的例子就勤工俭学，国外也有 boy/girl scouts 卖饼干，糖水这样的活动。&lt;/p&gt;
&lt;p&gt;可能你觉得这个想法不痛不痒也没啥毛病，那么问题来了：&lt;/p&gt;
&lt;p&gt;你是否支持未成年人开通收款码、打赏账号，成为有限责任的自然人/法人？&lt;/p&gt;
&lt;p&gt;你可以说，不支持，因为法律不允许。那么接下来的问题是：这样的「保护」立法放在21世纪今天是否依然是必须的？&lt;/p&gt;
&lt;h3&gt;孩子的自我&lt;/h3&gt;
&lt;p&gt;可能有人会问，除了获得一点收益，然后呢？之前跟一个朋友聊天，他吐槽说，马斯洛那套 「人最高的追求就是自我实现」 是假的，因为他研究这么多年，发现人其实没有自我。看到这问题，我想了下，回复他，重点不是自我，是实现。&lt;/p&gt;
&lt;p&gt;这个姓马的可能功夫不如另一个姓马的。另一个姓马的26岁的时候，向全世界宣布了他的理论：人如果不打工，就会感觉不开心。&lt;/p&gt;
&lt;p&gt;以前初中时，政治老师也这样照本宣科，说劳动是人的权利，是每个人的需要。估计现在绝大部分人看到这个理论，都会哈哈大笑：“这个权利谁想要我让给他，我希望有人能把这个权利给我剥夺了，我不想劳动！哈哈哈哈。。。” &lt;/p&gt;
&lt;p&gt;这个话题叫「劳动的异化」。对这两位姓马的说法，我有一个最浅显的解释：&lt;/p&gt;
&lt;p&gt;&lt;b&gt;人，是闲不下来的。总得找点事来霍霍。&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;人要实现的不一定是自我，而是实现一个想法。这个想法可能睡一觉第二天就发现很蠢，但依然是昨天「自我」一方面的冲动。所以「自我」是否准确存在，不重要。重要的是你起了这个心思，然后干成了。&lt;/p&gt;
&lt;p&gt;不得不说，劳动是人的本质特征，是人的"第一需要"。吃喝繁衍，那只是动物性。人性的体现是在「衣食足」之后，而知荣辱。&lt;/p&gt;
&lt;p&gt;人在劳动中，是需要肯定自己的，而不是否定自己。人要通过劳动感到幸福，而不是折磨。是不断发挥自己的聪明才智，而不是受到打击和摧残。&lt;/p&gt;
&lt;p&gt;学校高墙里的教育和考试，是不是也越来越异化呢？所以娃在学习之外的劳动，就显得非常有必要，而且长期缺失了。这里的劳动，也就是「做自己想做的事」。需要鼓励娃去尝试一些学科考试成绩之外的挑战，自我实现。如果这些兴趣恰好也能在成年之后从事相关的岗位，养活自己，那不就更好了？&lt;/p&gt;
&lt;h3&gt;结语&lt;/h3&gt;
&lt;p&gt;总的来说，未成年人强制去学校，和禁止劳动 这两大因素，加重了家长的负担，对娃也没啥好处。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Mon, 01 Jul 2024 09:41:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-07-01:/2024/stderr-13</guid><category>stderr</category></item><item><title>Making subprocess async friendly in Python</title><link>https://blog.est.im/2024/stdout-11</link><description>&lt;p&gt;It's been a while since i wrote something in English, mostly because there's nothing really interesting, &lt;a href="https://blog.est.im/2024/stdout-09"&gt;until now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Occasionally, when facing a long running task in Python, I would choose either a distrubuted tasks queue system, or for the convenience, just the &lt;code&gt;subprocess&lt;/code&gt; module. It's built-in and well designed for grabbing outputs of a child process running for a short period of time.&lt;/p&gt;
&lt;p&gt;But what if the child-process takes a really, really long time? In my case it's an expensive query, or some CPU/GPU intensive task, which needs to be launched from a running Web framework, like FastAPI. &lt;/p&gt;
&lt;h3&gt;Popen() fire and forget&lt;/h3&gt;
&lt;p&gt;if child-process's output, end state and the return code are irrelevant, a simple Popen would do&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subprocess.Popen(..., stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The problem is, after the child-process finishes, it will hang as a zombie, because the parents refused to claim its exit status. To fix this, add an extra parameter in &lt;code&gt;Popen()&lt;/code&gt; like &lt;code&gt;subprocess.Popen(..., start_new_session=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And write a simple loop periodically check for &lt;code&gt;WNOHANG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while 1:
    try:
        chpid, retcode, res = os.wait3(os.WNOHANG)
    except ChildProcessError:
        break
    sleep(5)
    if chpid == os.getpid():
        do_sth()
        break&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can be done using &lt;code&gt;BackgroundTasks&lt;/code&gt; in FastAPI/Starlette.&lt;/p&gt;
&lt;p&gt;In a way, the child-process hebaves like &lt;code&gt;nohup&lt;/code&gt; or screen/tmux, running in a detatched fashion.&lt;/p&gt;
&lt;p&gt;If you hate this many lines of code, just &lt;code&gt;subprocess.run("blah.sh &amp;amp;", shell=True)&lt;/code&gt; and wrap your commands in &lt;code&gt;blah.sh&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Make &lt;code&gt;.communicate()&lt;/code&gt; async&lt;/h3&gt;
&lt;p&gt;Sometimes I need to monitor and handle the stdout/stderr of a child-process, like forward the outputs as an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource"&gt;EventSource&lt;/a&gt; response to the browser.&lt;/p&gt;
&lt;p&gt;First I tried &lt;code&gt;.communicate()&lt;/code&gt; it will block until the process quites.&lt;/p&gt;
&lt;p&gt;Then I tried &lt;code&gt;Popen.stdout.read()&lt;/code&gt;, it will also block. Eventually I found a great hack from Stackoverlow like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p = subprocess.Popen(
    cmd, bufsize=0, text=True, stdin=subprocess.PIPE,
    stderr=subprocess.PIPE,  stdout=subprocess.PIPE, close_fds=True)
fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;p.stdout.read(1024)&lt;/code&gt; would return immediately, or with a &lt;code&gt;TypeError&lt;/code&gt; bnecause internal messed up with &lt;code&gt;None&lt;/code&gt; as non-blocking empty return.&lt;/p&gt;
&lt;p&gt;Wrap it with &lt;code&gt;try...except&lt;/code&gt; inside a loop, it worked fine as expected.&lt;/p&gt;
&lt;p&gt;When the parent process crashes unexpectedly, the child-process is still working, to detect this, just check for &lt;code&gt;BrokenPipeError&lt;/code&gt; carefully in child-process and gracefully shutdown.&lt;/p&gt;
&lt;h3&gt;Solved with &lt;code&gt;asyncio&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I tried harder reading the official Python docs, turns out the most easy solution is already there:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proc = await asyncio.create_subprocess_exec(
    sys.executable, '-c', code,
    stdout=asyncio.subprocess.PIPE)

# Read one line of output.
data = await proc.stdout.readline()
line = data.decode('ascii').rstrip()

# Wait for the subprocess exit.
await proc.wait()
return line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I guess another lesson learned today.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Sat, 22 Jun 2024 12:26:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-22:/2024/stdout-11</guid><category>stdout</category></item><item><title>人声分离简单评测</title><link>https://blog.est.im/2024/stdout-10</link><description>&lt;p&gt;娃要去表演唱歌，老师要求提供MTV。。 视频是&lt;a href="https://www.bilibili.com/video/BV1Ty4y147Sj/"&gt;这个&lt;/a&gt;，需要去掉人声部分&lt;/p&gt;
&lt;p&gt;先用 ffmpeg 提音轨 &lt;code&gt;ffmpeg -i v.mp4  -ac 1 1.mp3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;微信小程序上的全是骗充值的，网上的服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没卵用 https://vocalremover.org/ 名气很大，搜出来第一就这个&lt;/li&gt;
&lt;li&gt;没用 https://www.conversion-tool.com/karaoke/&lt;/li&gt;
&lt;li&gt;卡死 https://www.songpeel.com/song-to-karaoke&lt;/li&gt;
&lt;li&gt;要安装 https://github.com/adefossez/demucs&lt;/li&gt;
&lt;li&gt;要6G显存 https://github.com/Anjok07/ultimatevocalremovergui&lt;/li&gt;
&lt;li&gt;效果很好！ https://tunebat.com/Vocal-Remover 推荐&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看来人声分离，特别是童声，还是有点难。&lt;/p&gt;
&lt;p&gt;最后把得到的 a.mp3 塞回去&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i v.mp4 -i a.mp3 -c:v copy -map 0:v:0 -map 1:a:0 new.mp4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;btw 打了这么多网址，该不会被误认为SEO吧。囧。。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Fri, 21 Jun 2024 22:48:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-21:/2024/stdout-10</guid><category>stdout</category></item><item><title>吐槽pynsq，另外给subprocess糊了一个异步</title><link>https://blog.est.im/2024/stdout-09</link><description>&lt;h3&gt;pynsq太烂了&lt;/h3&gt;
&lt;p&gt;起初是因为需要在 Web API 里消费一个消息队列(nsq)，给浏览器返回 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource"&gt;EventSource&lt;/a&gt; 做实时输出。但是没想到&lt;a href="https://github.com/nsqio/pynsq/blob/master/nsq/__init__.py"&gt;官方库pynsq&lt;/a&gt;居然写得这么渣：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def _handle_term_signal(sig_num, frame):
    logging.getLogger(__name__).info(
        'TERM Signal handler called with signal %r', sig_num)
    tornado.ioloop.IOLoop.current().stop()

def run():
    """
    Starts any instantiated :class:`nsq.Reader` or :class:`nsq.Writer`
    """
    signal.signal(signal.SIGTERM, _handle_term_signal)
    signal.signal(signal.SIGINT, _handle_term_signal)
    tornado.ioloop.IOLoop.current().start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这都什么玩意儿？一个库何德何能也敢去乱劫持 signal？最他妈逗的是这个库的推荐写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import nsq
r = nsq.Reader(message_handler=handler,
        lookupd_http_addresses=['http://127.0.0.1:4161'],
        topic='nsq_reader', channel='asdf', lookupd_poll_interval=15)
nsq.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个 &lt;code&gt;r&lt;/code&gt; 莫名其妙的就能跑起来了。真是魔法。anyway，在Web API兼容这一坨是失败了，爆了一堆错，对付魔法的办法就是隔离，所以打算糊个脚本，通过多进程+PIPE来得到数据。&lt;/p&gt;
&lt;h3&gt;给 subprocess 加一个异步补丁&lt;/h3&gt;
&lt;p&gt;糊的时候发现，&lt;code&gt;subprocess&lt;/code&gt; 模块的 &lt;code&gt;.communicate()&lt;/code&gt; 方法是 blocking的， 居然不支持 async/await，于是只能继续糊：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import subprocess, fcntl, asyncio
p = subprocess.Popen(
    cmd, bufsize=0, text=True, stdin=subprocess.PIPE,
    stderr=subprocess.PIPE,  stdout=subprocess.PIPE, close_fds=True)
fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
buf = ''
while p.poll() is None:
    try:
        # read() with O_NONBLOCK might gets None thus TypeError
        buf += (p.stdout.read(1024) or '')
        contents = buf.split('\n')
        if len(contents) &amp;lt; 2:
            raise TypeError('Not enough')
    except TypeError:
        await asyncio.sleep(1)
        yield None
        continue
    buf = contents.pop(-1)
    for x in contents:
        yield x

p.terminate()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里用 &lt;code&gt;buf&lt;/code&gt;、&lt;code&gt;contents&lt;/code&gt; 是因为直接调用消息队列，每个消息都是分割好的；但是通过管道来读。得自己去处理字节流如何分割的问题，也就是传说简中特供的「粘包」问题。&lt;/p&gt;
&lt;p&gt;另外子进程可能因为Web框架的种种原因，不自觉退出或者变僵尸进程，需要向 stdout/stderr 做输出的时候检查一下 BrokenPipeError 处理后事主动退出即可。&lt;/p&gt;
&lt;p&gt;还有子进程如果输出完毕，需要代码里调用一下 &lt;code&gt;p.terminate()&lt;/code&gt;，才能回收，避免变zombie&lt;/p&gt;
&lt;p&gt;试了一下，也不是不能用，成功！正觉得自己又行了的时候，发现官方：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.8/library/asyncio-subprocess.html"&gt;https://docs.python.org/3.8/library/asyncio-subprocess.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;啊这。白忙活。&lt;/p&gt;
&lt;h3&gt;超长待机 subprocess&lt;/h3&gt;
&lt;p&gt;想起来之前还有个问题，一个API调用一个subprocess，然后等它执行，不想管。这个时候可以加一个参数 detach 模式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subprocess.Popen(..., start_new_session=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在同进程用里跑一个后台检查循环去检查子进程的 &lt;code&gt;WNOHANG&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while 1:
    try:
        chpid, retcode, res = os.wait3(os.WNOHANG)
    except ChildProcessError:
        break
    sleep(5)
    if chpid == os.getpid():
        do_sth()
        break
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想了下好像也搞复杂了。要不直接跑一个 &lt;code&gt;sh -c "blah.sh &amp;amp;"&lt;/code&gt; 算了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Fri, 21 Jun 2024 09:30:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-21:/2024/stdout-09</guid><category>stdout</category></item><item><title>如何删除 C:\Windows\WinSxS 文件</title><link>https://blog.est.im/2024/stdout-08</link><description>&lt;p&gt;天气热得心慌，看Win10不爽，决定删几个文件玩玩&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先你需要以 &lt;code&gt;SYSTEM&lt;/code&gt; 用户启动 &lt;code&gt;cmd.exe&lt;/code&gt;&lt;br /&gt;
Win+R 敲入：&lt;br /&gt;
&lt;code&gt;"\\live.sysinternals.com@SSL\DavWWWRoot\tools\PsExec.exe" -i -s cmd.exe&lt;/code&gt;&lt;br /&gt;
回车。确认当前身份敲入 &lt;code&gt;whoami&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;夺权：&lt;code&gt;takeown /F "C:\Windows\WinSxS\Backup" /A /R /D Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;授权：&lt;code&gt;cacls "C:\Windows\WinSxS\Backup" /T /G SYSTEM:F /C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开删：&lt;code&gt;rd /s /q "C:\Windows\WinSxS\Backup"&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;爽！&lt;/p&gt;
&lt;p&gt;当然，你也可以让系统代替你清理：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;很老的磁盘清理工具 &lt;code&gt;cleanmgr.exe&lt;/code&gt;  也可以试试，删不要的程序 &lt;code&gt;appwiz.cpl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;老黄家的  DXCache 也十分让人不解。这破玩意还存2个地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%LOCALAPPDATA%\NVIDIA\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%APPDATA%\NVIDIA&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;老夫当年给 &lt;code&gt;C:&lt;/code&gt; 装了个最慢的SSD，失策。去年（2023）那一波M.2降价潮一直等等结果错过了，拍断大腿追悔莫及。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Fri, 14 Jun 2024 22:50:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-14:/2024/stdout-08</guid><category>stdout</category></item><item><title>chromium/libcef.dll真是毒瘤</title><link>https://blog.est.im/2024/stderr-12</link><description>&lt;p&gt;先&lt;a href="https://x.com/est/status/1801240801600778244"&gt;说@MicrosoftEdge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img referrerpolicy="no-referrer" src="https://pbs.twimg.com/media/GP9KvQwboAA7lLa?format=webp" /&gt;&lt;/p&gt;
&lt;p&gt;这他妈存3份，吃饱了？&lt;/p&gt;
&lt;p&gt;再&lt;a href="https://x.com/est/status/1801259413858402763"&gt;说Epic Games&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img referrerpolicy="no-referrer" src="https://pbs.twimg.com/media/GP9b1mMakAA_H1j?format=webp" /&gt;&lt;/p&gt;
&lt;p&gt;还能搞6份？真无语了。然后 icudtl.dat 以及 ICU 这一坨也是。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Thu, 13 Jun 2024 21:15:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-13:/2024/stderr-12</guid><category>stderr</category></item><item><title>从 Leanote 迁移到 Obsidian</title><link>https://blog.est.im/2024/stdout-07</link><description>&lt;p&gt;差不多积累了&lt;a href="https://www.v2ex.com/t/133479"&gt;10年&lt;/a&gt;的笔记，因为软件开发商跑路去做 2B 了，这玩意也没人维护了。换 Obsidian&lt;/p&gt;
&lt;p&gt;Leanote 不支持导出 &lt;code&gt;.md&lt;/code&gt; 但是它自己的格式就是 json，转换一下很简单。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把一个目录下的笔记批量导出为 Leanote 格式，比如导出到 &lt;code&gt;/tmp/folder1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行Python代码&lt;br /&gt;
&lt;code&gt;import json
    dir = '/tmp/folder1'
    for n in os.listdir(dir):
    if not n.endswith('.leanote'): continue
    with open(f"{dir}{n.replace('.leanote', '.md')}", "w") as f2, open(dir+n) as f1:
        f2.write(json.load(f1)['notes'][0]['content'])
    os.remove(dir+n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;你会发现该目录下的 &lt;code&gt;.leanote&lt;/code&gt; 都变成了 &lt;code&gt;.md&lt;/code&gt;。拖拽到 Obsidian 即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;希望对搜到这篇文章的人有所帮助。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Mon, 10 Jun 2024 22:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-10:/2024/stdout-07</guid><category>stdout</category></item><item><title>挑简历看麻了，就业市场太卷了</title><link>https://blog.est.im/2024/stderr-10</link><description>&lt;p&gt;最近帮挑选简历，二线城市中低端技术岗，需求是上午发的，邮箱中午就炸了。这投递量给搞麻了，这也太多了。&lt;/p&gt;
&lt;p&gt;想到什么写什么&lt;/p&gt;
&lt;h3&gt;几个感悟&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;第一，学历歧视是真的。本来还想看看能不能相中一个优秀的拼搏者。可能因为岗位要求不高，个个都很匹配。大家的工作经历都很丰富，也就是雷同。唯一不同的就这学历了。所谓的985 211不是他们实力强，而是名声显赫的院校到处刷存在感。如果你第一学位不如你的经历强势，建议把教育信息这一栏放到最后。不要把你的名字和学历挂靠得那么紧密！&lt;/li&gt;
&lt;li&gt;简历技巧：一定要写清楚 求职意向 。因为筛简历的很可能同时有多个岗位，你 hint 一下，会更容易帮助阅读者理解上下文。最讨厌看到文不对题的简历。&lt;/li&gt;
&lt;li&gt;经验书写部分，真的不要写参与过XX项目，用XX技术，基于XX，做过XX系统了。给人看麻了，关键字都快看得不认识了。这里我心里有一个严重的偏见，想很快找到亮点，快出来一个亮点给我一个不拒掉的理由！有的时候真的很难。当然，如果你全是亮点，反而觉得你有点作，会不会有所隐瞒？会不会有啥问题和不足？&lt;/li&gt;
&lt;li&gt;面试的时候讲项目，很多时候陷入「述职报告」模式，说我们团队做了XX，我们做了XX，请打住。这里公司考察的是你「个人」能力，不要把别人的功劳给take credit。之前面试有人吹了几十分钟某分布式系统杰作，最后一问，居然是他来之前就有的现成的。啊这。。。。。&lt;/li&gt;
&lt;li&gt;还是刚才那个问题，简历里的的项目如果很大，建议写清楚哪些部分是自己的，否则会让人怀疑是不是把整个团队的工作都当自己的成果了。不太真实。&lt;/li&gt;
&lt;li&gt;技术岗简历真的不要贴大头照了。。除非你的长相能帮助工作。否则很容易让大脑暂停理性思考，进入感性的评头论足模式。&lt;/li&gt;
&lt;li&gt;写XX能力强，能吃苦这种笼统模糊的，只能定性不能定量的，还不如不写。因为没证据。能力强体现在什么地方？吃苦有多能吃？沟通能力好到什么地步？&lt;/li&gt;
&lt;li&gt;无论正序还是倒序，把公司和项目经历放在一起。比如A公司：项目1项目2，B公司：项目3。这样。特别是分开2页的，看的时候需要把项目和公司跨页按时间JOIN才能对应。职位全称不重要，职位干啥的，扮演什么角色起到什么作用很重要&lt;/li&gt;
&lt;li&gt;行间距留大段空白纯粹是浪费阅读人的视力和时间。排版不用过渡美化，但是字体一定要统一，段落起止位置一定要对齐、对齐、对齐&lt;/li&gt;
&lt;li&gt;能不能约到面试时间，有可能跟是否能订到会议室有关。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我发现，写简历的思考模式往往是：我有哪些NB的地方能添油加醋让对方相信，NB的东西越多越好&lt;/p&gt;
&lt;p&gt;而简历阅读者的思考模式是：哪些东西和我手上的活儿最匹配？&lt;/p&gt;
&lt;p&gt;从这个角度来说，根据JD定制一套简历是十分、非常、及其有必要的。没有关系的经历一笔带过甚至不需要提。&lt;/p&gt;
&lt;p&gt;可能很多人写简历，出发点是，广撒网，海投，这一点对于竞争激烈的岗位来说万万不可行。你以为简历是「只要够匹配，我就有机会」。实际上简历如果多了，它压根就不是一个是否命中 yes/no 的问题，而是一个 ranking 问题。&lt;/p&gt;
&lt;p&gt;任何事只要变成「排位」，那就很残酷，很竞技了。你不仅要达标，而且要考虑如何比别人的简历「更加」匹配。&lt;/p&gt;
&lt;h3&gt;招聘系统的吐槽&lt;/h3&gt;
&lt;p&gt;厂里的简历系统很多都只是一个 &lt;code&gt;姓名&lt;/code&gt;-&lt;code&gt;岗位&lt;/code&gt;-&lt;code&gt;投递时间&lt;/code&gt; 三元组列表。这玩意压根就不能拿来做 ranking，只能靠筛选者的「瞬时记忆」。任何ranking，底层都是一堆权重的叠加，我不得不做一个 Excel 把候选人的名字放进去，然后几个考察点人别打分，最后算上权重，择优录取。&lt;/p&gt;
&lt;p&gt;爆量之后，简历系统最大的麻烦，居然是去重。因为不仅有自投，还有渠道方帮助筛选投递的，同一个人，多个版本来源不同的简历，会先后刷出来。很是麻烦。名字不能保证唯一，pdf解析又麻烦，估计很多人懒得做。2333&lt;/p&gt;
&lt;p&gt;除了上面的「量化」筛选决策的想法，还有然后对很多候选人其实很惋惜，也想跟对方反馈一下。但是又很懒。我想招聘平台应该提供一个付费功能，请筛选者指点一下问题所在，至少让别人知道哪里碰壁了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Thu, 06 Jun 2024 14:35:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-06-06:/2024/stderr-10</guid><category>stderr</category></item><item><title>正在加速崩塌的是「中文」，不是互联网</title><link>https://blog.est.im/2024/stderr-09</link><description>&lt;p&gt;看到一个说法《&lt;a href="https://chinadigitaltimes.net/chinese/708143.html"&gt;何加盐｜中文互联网正在加速崩塌&lt;/a&gt;》，文章说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎所有在那个年代曾经红火过的中文网站，如网易、搜狐、校园BBS、西祠胡同、凯迪猫眼、天涯论坛、校内网（人人网）、新浪博客、百度贴吧、以及大量的个人网站等，在一定年份之前的信息都已经完全消失不见了，甚至大部分网站是所有年份的信息都消失了。唯一例外的是新浪网，还能找到一些十几年前的信息，但也是极少数的寥寥几条，其他99.9999%以上的内容，全都消失了。&lt;br /&gt;
为什么会出现这种情况呢？我猜想，主要原因可能是两个：一是经济原因。网站的存在，需要服务器、需要带宽、需要机房、需要人员运维……二是监管原因。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无独有偶，刷到&lt;a href="https://x.com/howie_serious/status/1793470505875632138"&gt;一个帖子&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://weibo.com/1497035431/NevUys55V"&gt;2023-8-14 11:00&lt;/a&gt;梁博：Common Crawl中文数据提取出来了，做了去黄等处理，发现简体中文压缩数据只有6TB，解压后30TB左右，繁体压缩数据6TB。中文数据到2019年冲到一个最大值，之后就回落了，不知道2020年具体发生了什么事情。。中文网页数据还是有点凋零。是不是有些网站不维护了？&lt;a href="https://wx1.sinaimg.cn/large/593af2a7gy1hgw36sb3x9j214u0ewk4n.jpg"&gt;图&lt;/a&gt;&lt;br /&gt;
&lt;img referrerpolicy="no-referrer" src="https://pbs.twimg.com/media/GOOnTzIW0AALDF7?format=jpg&amp;name=large" /&gt;&lt;/p&gt;
&lt;p&gt;更大的问题是所谓科技巨头们自建高墙，把用户和内容视为自家资源，不支持互联网链接，公然且无耻地未被互联网开放互联的精神。你在 twitter 里面可以引用，加任意链接，信息自由流动。在微信、抖音、小红书里面试试？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;twitter，或者说 𝕏，也开始建墙了。比如 nitter.net 就不允许使用了。walled garden 我觉得算一个因素但不是绝对因素，比如十几年前CCF和DRL这类封闭式论坛还是经常有人转帖出来，好的帖子转就完事了。依我看来，中文互联网的崩溃有两个因素，以及一个结果&lt;/p&gt;
&lt;h3&gt;1. 长截图的崛起。&lt;/h3&gt;
&lt;p&gt;HN有一个神评论，说hyper-text transfer protocol名不副实，信息传递都是通过screenshots transfer。这玩意配合手机那个破屏幕简直绝了。这不仅是国内的问题，国外ig (instagram，ins)、𝕏上的文字截图不要太多。这个东西一方面缺点就是无法根据屏幕重排版，看起来别扭，但是也有诸多好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保留了原始的文字和图片。富文本转帖一直是一个世纪难题，你去用js+html做一个rich text editor带附件上传的就知道多蛋痛了。还不如 .png 甚至 .jpg 一把梭&lt;/li&gt;
&lt;li&gt;防止了文本传播中的添油加醋篡改。甚至图片都包浆了，都还是那个样。&lt;/li&gt;
&lt;li&gt;最后，而已是最重要的一点，OCR技术不能 100% 准确率拦截长截图里的敏感词，很多截图 - 再截屏的二次传播使得md5, similarity-hash 都无法有效对抗热点事件的长截图传播。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总体来说，长截图是移动互联网的原生信息载体，文本不是。&lt;/p&gt;
&lt;h3&gt;2. 音视频的统治&lt;/h3&gt;
&lt;p&gt;回到正题，中文互联网 的确崩溃了，但是崩溃的是中「文」这一 &lt;strong&gt;文本&lt;/strong&gt; 为主的形式。看看长短视频、直播网站的流量，即便墙和审核机制都挡不住国内外沙雕meme的传播。汉「语」互联网正在蓬勃发展。我举个例子。在过去带宽承载不起大流量音视频的年代，如果一个明星遇到绯闻需要澄清，那么肯定精心会写一篇媒体稿发出来，登报或者接受采访。最近的比如 &lt;a href="https://www.zhihu.com/question/656601416"&gt;汪峰承认与森林北恋情&lt;/a&gt; ，女主Senlinbei0707选择直接拍&lt;a href="https://www.douyin.com/video/7371455027996593427"&gt;douyin声明&lt;/a&gt; 。服化道、背景音乐、肢体语言、镜头这些，代替了纸和笔，输入法和文字段落组织&lt;/p&gt;
&lt;p&gt;掌握和驯服文字成本极高，文字的消亡，语言和表演取而代之，是市井乡土阶级的崛起，搭建了一个跨越空间的超级熟人社会。但是唯一能跨越时间的可能只有高度信息浓缩的文字。然而，&lt;a href="https://blog.est.im/2023/stdout-02"&gt;文字对于大多数普通人是无益的&lt;/a&gt;，文字的发明本来就是精英阶级用来和上天鬼神对话的工具，人与人之间的沟通，口语和动作就够了。&lt;/p&gt;
&lt;h3&gt;问题的关键：搜索引擎&lt;/h3&gt;
&lt;p&gt;“互联网正在加速崩塌”这一说法，很多例子就是XXX搜不到了。有没有可能，问题不出在资料，而是搜索工具？&lt;/p&gt;
&lt;p&gt;搜索引擎在90、00年代是个稀罕货，那个时候SSD还没普及，信息检索是个高精尖的专业领域，但是随着 Lucene、Solr、ElasticSearch这一类免费的开源软件的普及，极大降低了自建搜索的门槛。&lt;/p&gt;
&lt;p&gt;搜索不用集中了，内容网站都是自带搜索，还自带推荐系统，把ranking的问题也一起解决了。SEO和内容农场早就把公共、集中的搜索引擎干得生活不能自理了。ChatGPT这样的怪物出来之后，你还指望能搜到啥有效、真实的信息？&lt;/p&gt;
&lt;p&gt;随着搜索引擎的没落，新的巨大缺口也在形成，比如刚才 森林北的视频，我们可以问以下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;她的口红色号是什么？&lt;/li&gt;
&lt;li&gt;这片子的BGM是什么？&lt;/li&gt;
&lt;li&gt;她自己列举了多少家公司或机构，她分别属于什么职位？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些都是需要去端到端 infer 的。也是一个技术创业的点子和机会。以后存的信息都是向量，token会取代文本。&lt;/p&gt;
&lt;h3&gt;aftermath&lt;/h3&gt;
&lt;p&gt;感觉说了这么多，无非在纠结「文本」或者「文字」这一概念本身。但是我觉得钻这个牛角尖是非常有趣的。&lt;/p&gt;
&lt;p&gt;文本实际上就是人脑活动的压缩，对信息的概括。这是transformer架构和语言模型对我的一个巨大启发。这个有损压缩，丢掉的是什么呢？情绪和环境上下文，也就是亲切感。如今的音视频把这一最古老的人类群居基石——聊天拉回现实，放入口袋里那一小块屏幕中，怪不得雷军、周鸿祎这样的老人都出来当网红了。人一辈子可以通过读文字了解很多知识，但是「邓巴数」这个东西，决定了你一辈子的注意力只有150人。&lt;/p&gt;
&lt;p&gt;人们对互联网的期待显然可以分为两种：一种是客观的，工具性质的，严肃话题研究。这就是过去USENET和UGC的宝藏所在；另一种，人们是为了瞬间的快乐，长时间的归属感，去找认同的。这个时候，互联网提供了多彩的屁股位置选项。过去，没人知道互联网上对方是不是一条狗，现在，没人在乎你是不是沃尔玛购物袋，但是这并不妨碍网上武装直升机们为这事吵得不亦乐乎。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Thu, 23 May 2024 15:16:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-05-23:/2024/stderr-09</guid><category>stderr</category></item><item><title>记录一个噩梦</title><link>https://blog.est.im/2024/stderr-08</link><description>&lt;p&gt;今早凌晨，从噩梦中惊醒，然后就一直辗转反侧睡不着；可能因为年龄大的缘故，我经常能意识到我在做梦，所谓 lucid dream，遇到好玩需要继续推进情节，不会太追究是否真的清醒，反而会不自觉的去脑补当前梦里剧情的合理性，所以下面很多时候是插叙。&lt;/p&gt;
&lt;p&gt;出场大概是和家人挤在一间熟悉的高层小区的老旧房间里，惊恐的看着窗外昏暗的天空。可能因为昨天晚上打了一会FPS，加上前几天看了《Dune II》这部电影，对杀戮环节很有代入感，所以不知不觉从那里搞到了一把步枪，装满了子弹。&lt;/p&gt;
&lt;p&gt;这时窗外突然突然钻进来一个人影，我嘀咕到，现在已经 天下大乱，是末日劫生；眼前这个如同丧尸一般爬行的人，正在扑向我的奶奶，这个人看上去非常瘦弱，我操起武器一阵突突突，放倒了眼前这个威胁。&lt;/p&gt;
&lt;p&gt;房间被弄乱，窗边墙角一片狼藉，地上还躺着一个狰狞的 ragdoll 需要得处理，重点来了，攻击性这么的强，这个身躯却比正常人小很多，十分的瘦弱，我甚至把他身子头和腿对折，就像一张纸一样。然后单手轻松将其拧起来，像往常一样把他带下楼，扔进了垃圾桶！一个鲜活的生命就这样从我眼前消失了！&lt;/p&gt;
&lt;p&gt;这个突然出现情况，让我心脏扑通扑通的跳，直接给我干惊醒了。半睡半醒迷迷糊糊之间，我又开始怀疑为啥会有这样的 丧尸 从高层建筑的窗户突然出现。可能是最近看了太多五代十国和南北朝之类的历史惨剧视频，我便开始就地分析此情此景的合理性，结论是——裹挟。&lt;/p&gt;
&lt;p&gt;在古代，遇到荒年，正常的社会秩序被打破，就连最基本的粮食生产，都会遭到莫名其妙的武力干扰或者霸占。自身难保之后，所以很多人干脆一不做二不休，从劳动者变身为掠夺者。但是人总是要吃饭，饭又不会自动从地里长出来，怎么办？抢。所以就回到了开头这样的，去抢我这类正常生活在小区里居住养家糊口的人。掠夺者相互攻伐，让瘦弱得不行，饿的没法再饿的人，去小区里抢食物。因为太虚无法暴力突破正门，只能从顶楼往下爬看到打开的窗户趁虚而入。被破坏的家庭如果不幸被击垮，无以为继，没了希望和出路，又只能加入这样的劫掠行为，所以规模越来越大，直到所有人都绝望，没了最基本的社会秩序和个人尊严，只有无处不在的压迫和窒息。&lt;/p&gt;
&lt;p&gt;我又想起来废土世界各种影视作品，想到这里感觉挺合理的，就又睡着了。。。。。。&lt;/p&gt;
&lt;p&gt;起床之后，这个噩梦吓得不轻。以前我觉得做清醒梦太好玩了，能意识到在做梦，可以随意发挥做一些危险而平时不敢做的事，比如跳崖，比如飞行，比如暴力。不用顾及白天的压抑。但是现在看来做清醒梦太可怕了，我个人而言，能识别出清醒梦，根本原理是认识到眼前的事物不合理之处，得出只有在梦里才能发生这唯一解释，然后就开始放飞自我。但是人脑是会玩的。你玩呀浪呀，它会给你编造一个无解的噩梦，让你无论怎么选择都是一条死路。在残酷的绝望中让你大脑死机醒过来。&lt;/p&gt;
&lt;p&gt;现实是荒诞和不可理喻的。成年人的世界是建立在一些不经意的谎言之上，所谓共同想象体。很大程度上，这些偶然和不合理性，才是给了我们短暂的幸福和苟且；纯理性构建的世界，比如我这次的梦境，如果稍有差错，钢铁一样的因果齿轮只会把你一切梦想和希望碾碎。天地不仁，未来的真实世界或许是残酷的，所以珍惜当下吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Tue, 07 May 2024 21:20:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-05-07:/2024/stderr-08</guid><category>stderr</category></item><item><title>信息噪音时代的悲哀</title><link>https://blog.est.im/2024/stderr-07</link><description>&lt;p&gt;书接上回，小米汽车发布以后，和家人聊这个话题，突然发现一个问题，孩子对车这玩意很不了解，也不感兴趣。&lt;/p&gt;
&lt;p&gt;我记得我小时候，对机械结构的东西很着迷，很喜欢抱着一本杂志看这种拆解图研究半天。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/2024/stderr-07-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/2024/stderr-07-02.avif" /&gt;&lt;/p&gt;
&lt;p&gt;虽然也没能看出个门道，但是哪个男孩子能拒绝一张精美的跑车海报和原理图呢。那个年代我可能会对着一个跑车+美女的年历发呆，可能也就是那个时候对商品社会、工业设计产生了向往和憧憬。现在的孩子们对现实中车的品牌和了解可能也就局限于身边见过的和手机上刷到的。比如我家娃最羡慕的车，是有鹰翼门可以向上开的 Model X。但是对汽车工业和跑车的认识很少，不如我们小时候那么津津乐道。&lt;/p&gt;
&lt;p&gt;想起来我们小时候信息很匮乏，大家都通过报刊、杂志了解外部世界，特别是从没见过的欧美的汽车、飞机反而观察得特别仔细。美军飞机有多少个型号、有几首航母都是放学和下课时间讨论的话题。&lt;/p&gt;
&lt;p&gt;现在的孩子，比如我家，对电子产品控制得比较严格，电视也没有怎么允许看，除了书本还是书本。其实对外界了解的渠道反而比我们那个时候少得多。传统的报刊杂志有一点好，第一它是每周每月更新的，第二它的编辑是有一定文化水准和见过世面的，比如介绍汽车肯定会顺带介绍下汽车工业的历史、这个品牌的成长和背后的故事。现在的抖音、b站等充斥的都是调动情绪的短期热点话题，缺乏一个静下心来去琢磨和思考的「大画面」和「大背景」，以及人们是通过什么样的努力和付出，才能「创造」出来令人欣赏和惊叹的作品。比如小米汽车，网上甚至连一个把时间线串起来，讲讲设计过程那些不为人知的故事的报道都没有，唯一采访了设计师 李田原 的媒体，居然是车托之家&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/2024/stderr-07-03.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;采访也是问了几个不痛不痒的问题，主持人全程玩手机都不舍得正面看设计师一眼。而且视频播放量极低，压根没人能刷到&lt;/p&gt;
&lt;p&gt;我觉得信息时代的悲哀莫过于此了。什么样的东西都能找到，但是孩子很难从这样的环境里挖掘到那些启发、振奋人心、能畅享未来的东西。也没有人会整理这些东西。喧闹的视频一看就忘，我们再也没有一张画或者文字让人细细品味和反复琢磨的时光了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Wed, 03 Apr 2024 16:21:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-04-03:/2024/stderr-07</guid><category>stderr</category></item><item><title>雷军 小米汽车 发布会的后劲真大啊</title><link>https://blog.est.im/2024/stderr-06</link><description>&lt;p&gt;是的，我也在2024-03-28观看了雷军的 小米汽车 发布会。现在想起来，真蛋痛啊，花了3个小时去看了一个我不会买的产品的发布会。&lt;/p&gt;
&lt;p&gt;我不买的原因是已经有车了，本来也不想看，结果这发布会居然没啥困场和尿点，一不小心就完整看完了。想起来平时看个长剧都困难，发布会本身轿车的东西其实我早就知道个七七八八了，居然吸引我那么长时间注意力。真是一个神奇的现象。&lt;/p&gt;
&lt;p&gt;这几天刷到一些视频，大象主观说车 的《&lt;a href="https://www.bilibili.com/video/BV1Yz421o7Y8/"&gt;小米汽车发布会迪粉观后感&lt;/a&gt;》，他本身是个（比亚）迪粉，他说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看完，你就会觉得，卧槽，我，我 超 想 投 米 的！我超想当米 boy 的，我超想支持雷军的梦想的，就这种感觉。（战术取掉眼镜）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雷军发布会的魔力这几天越来越上头，后劲越来越大，各个 app 也敏锐察觉到了我的兴趣，也是铺天盖地推送，比如这个就有意思&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.zhihu.com/question/650440141/answer/3447572793"&gt;雷军真的是写ppt的大神&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;低级的ppt就是你们经常做的，念文案、数据，圈几个关键字当标题；&lt;/li&gt;
&lt;li&gt;中级的ppt，让普通人，甚至一个文盲都能听懂，你在说什么；&lt;/li&gt;
&lt;li&gt;高级的ppt，讲一个故事，讲一个深入人心的故事，在这个过程中，说你想要说的东西。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是讲故事？常见的故事大纲。介绍主角团——遇到小困难——找痛点（主角团被虐）——解决小困难——遇到更大的困难（主角团泄气）——全世界就主角团能解决这个问题——解决大困难——在解决困难过程中顺手谈个恋爱，或者解决家庭矛盾——最后，坏人必死，正义得到主张，升华主题。&lt;br /&gt;
你们可以看看雷军如何讲su7的防晒功能。&lt;br /&gt;
雷军：我们做过用户调研，很多特斯拉的车主表示，夏天会不会太晒，坐在车里面像烤箱。好，我们就把这个防晒作为核心点去突破。（遇到小问题）怎么突破？&lt;br /&gt;
第一点，天幕玻璃，我们做了双层镀银，隔绝了99.9%的紫外线，99.1%的红外线。我们在研究这个问题的时候发现更严重的是什么？是前风挡玻璃其实更晒。（遇到更大的困难）所以，很多开车的女生都会带冰袖。为什么呢？因为前车前风挡特别特别晒。（找和普通人之间的痛点）。所以，我们甚至做了三层镀银，然后，才达到这个紫外线隔绝99.5%，红外线97.6%.这是今天轿车里面唯一一款做三层镀银的。（全世界就主角团能解决这个问题）。还有，我们把四个车门都做了uvir的图层。这个图层紫外线隔绝率达到99.9%，如果换算成防晒霜的指数，差不多相当于SPF100+,或者PA4个加的 这个程度。所以，我们在防晒上下了很多功夫。后排，我们顺便做了隐私玻璃，省得大家再去贴个膜什么的。到底有多防晒呢？那个我们做一个夏天的简单的测试。（升华主题）38度暴晒1.5个小时，我们拿su7和model3对比。结果发现，su7的车内温度比model3低12摄氏度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后又刷到《&lt;a href="https://www.bilibili.com/video/BV1Zx421S7PV/"&gt;腾势赵长江有点可爱（孙少军直播切片）&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;看完之后，我感觉赵长江这样的老总可能真的学不来雷军。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赵长江1986年出生于湖南浏阳，2009年从比亚迪汽车创始人王传福的母校——中南大学毕业后，他选择了追寻自己的“偶像”船夫哥，成为了一名比亚迪汽车区域销售经理。经过数年的摸爬滚打，有了天南地北多个地区的派遣和实战经验，由于年轻好学敢想敢干，赵长江在 2015 年被任命为比亚迪汽车京津地区营销总监。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正如视频里讲到的，他们对产品的「差异性」分析特别到位，然后对「怎么打」有不错的思路和执行力，但有个问题是，各项指标就是天经地义「固定」在那里的，由供应商和研发团队「呈递」出来的现成。所以接下里的问题就是如何根据「既有」的东西，打的过就吹，打不过就降价。&lt;/p&gt;
&lt;p&gt;我分析，销售出身的人的演讲，和雷军这样的人最大的区别就在此。可能因为雷军是程序员出身，各项指标不是「天经地义」的，而是「生长」出来的。雷军&lt;a href="https://www.bilibili.com/video/BV1tq421A7dZ"&gt;说&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以你们今天看到的，是我们完全推倒，2022年初全部重做的。那个时候又在疫情期间，压力巨大。在最难的一段时间里是，我跟设计团队每天早晨8点钟一个小时的视频会，每天啊，everyday，周六周日都是。所以每一个细节我都参与过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;雷军为啥能把一个三层镀银的前挡讲得那么生动？因为他可能真的参与了这个设计和决策。娓娓道来侃侃而谈就像他自己的孩子一样。所以能讲出来让人听上去很自然、有吸引力的故事。整个发布会就不是那种背后想卖你东西那种拉扯和算计，而是跟小区里阿姨们聊自家娃一样充满了八卦的话题性。&lt;/p&gt;
&lt;p&gt;写到这里，我一直都在尽量避免一个词——营销。很多人觉得这就是一场米系的闹剧和大型新能源 ev 发布买热榜事件，因为我觉得雷军这样的show不仅仅是想让你掏30w 让他这个亿万富翁变得更富有这么简单。正如小区里阿姨们聊娃不是为了把娃卖给你一样的道理。演讲和情绪感染可能是在未来 AI 时代里愈加重要的一种能力，而雷军为代表的「开发者」背景出身的人站在舞台上展现出那种独特的魅力，非常值得学习和品味。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Sun, 31 Mar 2024 01:14:44 +0800</pubDate><guid isPermaLink="false">tag:None,2024-03-31:/2024/stderr-06</guid><category>stderr</category></item><item><title>梦见未来人类</title><link>https://blog.est.im/2024/stderr-05</link><description>&lt;p&gt;昨天半夜做了一个奇怪的梦，梦见一个毛毛虫在墙角制作自己的关节，一根棍子，中间一个关节，可以对折，看似还是金属或者塑料材质，完工了把关节拧一下，就给自己装上了。。。太过于惊悚于是就醒了。&lt;/p&gt;
&lt;p&gt;起床开始琢磨，可能是睡前刷B站，看到一个人才UP主 &lt;a href="https://space.bilibili.com/15892313"&gt;知名相声演员BBBBB大王&lt;/a&gt; 刷了她不少视频。她南京人东北上大学，父母来自四川，被催婚和生娃问题搞得很崩，在英国和韩国奔波，视频风格别具一格。关于韩国那种不婚、人口负增长、内卷的视频特别多，比较有趣，看了不少。总体意思说，韩国的女性有自己的经济地位后，就不结婚生娃了。不用看男人成见就自在活着多好。&lt;/p&gt;
&lt;p&gt;我感觉BB说得相当有道理。但是人口没了之后，未来的人类怎么办呢？这可能是潜意识留下的一个疑问然后就睡着了。&lt;/p&gt;
&lt;p&gt;越想越觉得，这个奇怪的梦说不定就是潜意识的答案。未来人类说不定很有可能走虫族路线。首先按照现在的剧本，人类对自己身体和外表越来越不满意，对美的追求，个性的改造越来越多。自然界谁的改造最彻底呢？虫蛹的蜕变。谁不想从一只毛毛虫变成有翅膀到处飞的蝴蝶呀。说不定未来能制造出合成材料，给每人安装一对翅膀？&lt;/p&gt;
&lt;p&gt;但是成人动刀子改造背部结构，后加翅膀问题太多，说不定臂力不足大多数人人飞不起来，飞行也需要巨大的呼吸器官改造成本否则供能太弱，飞不太久。最好的办法就是从胚胎开始重新设计肢体结构。BB的有一部说自己XS的身材居然淘宝买S都觉得小了。明明她自己都只剩下bone了。说起来，成虫就直接没有脂肪，直接bone就暴露在外边吧？大家都一样的流线型bone，不存在身材歧视。&lt;/p&gt;
&lt;p&gt;既然都可以自定义设计人体四肢了，干脆全部身体结构推倒重构吧。人全身上下全改造了，保留啥呢？保留一个头作为意识留下吧。&lt;/p&gt;
&lt;p&gt;所以未来的人类可能是：女性就不要怀孕受累了，人工授精+人造子宫，生出来一个基础款的肉体。社会教育给与起步款的灵魂之后，这个「幼体」就得去搜集改造自己的营养和原材料，然后时机成熟之后，做一个「虫蛹」然后把自己封印起来重新改造。改造完之后就「变态」为高级形态  b（￣▽￣）d　&lt;/p&gt;
&lt;p&gt;这一套机制最大的问题就是，改造人不能自我复制。如果基因改造有突破，能自定义编辑，那么很多人可能会选预设一套3D打印机，人生下来就真的可以外观类似毛毛虫，到处爬行去自动拾取有机物、无机物矿物质，然后疯狂积累原材料到足够改造自己的身体之后，找一个安全的地方造蛹，然后打印身体。最后破蛹而出参与生殖都斗争和扩大领地，然后继续繁衍。。233333&lt;/p&gt;
&lt;p&gt;胡思乱想的。如有冒犯，梦境全责！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Tue, 26 Mar 2024 08:49:00 +0800</pubDate><guid isPermaLink="false">tag:None,2024-03-26:/2024/stderr-05</guid><category>stderr</category></item><item><title>快速入睡的技巧和原理</title><link>https://blog.est.im/2024/stdout-05</link><description>&lt;p&gt;随着年龄的增长，加上工作和生活的恶习，睡眠越来越不好。很多时候躺在床上明明已经非常困了，但是大脑一不小心陷入胡思乱想，然后越想越睡不着。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/2024/stdout-05-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;很多人说把大脑放空就能睡着了，我也试过，放空是不可能的，大脑时时刻刻总得琢磨点什么；既然要琢磨点什么，那我们能否找一部分最容易睡着的来琢磨？这几年我倒琢磨出一个非常行之有效的方法用来入睡：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;停止理性推演！强行带入感性的、放松、舒服的回忆体验占据大脑活动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体展开，首先我这里对睡不着的「胡思乱想」作了一个二元分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一种是「理性」，逻辑推演：工作上的任务如何完成，生活中的矛盾如何化解，职业和家庭面对的困难，身边人群的压力，社会环境如何改进，民族国家的命运如何？电车会是能源革命吗？巴以冲突俄乌战争如何化解？等等，这类胡思乱想基本模式是「因果」：如果我做到A，那么B就会发生；如果我避免C，那么D这个糟糕的结果就能挽回。这类事，千万不要躺在床上想，否则越想越气。&lt;/li&gt;
&lt;li&gt;另一种思绪我们称之为感性，温暖的阳光下微风吹过皮肤，恋人的手轻轻搂着你的腰，碧蓝的海平面上星星点点的船帆，你躺在椅子上无忧无虑的闭上眼睛享受这一切，只要把自己带入这种你亲身经历过的让你舒服，放松的体会中，假想你现在正在亲身经历这种愉快的事，那么你很快就能入睡。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;或许，有人会说我命苦啊～没那么多享受可以回味。我之前也是这样，总觉得过得很匆匆没这么留下的美好回忆，有一次下班路过郊外，看到天边块落山的太阳，光线没那么刺眼，橙红色的余晖给白云描了个边，倒影在一处水塘里，没有了中午那么热的暴晒，微风刮过岸边那些稀稀拉拉的花朵和绿树。感受到美的瞬间迫使我立刻停下脚步，找个草坪坐下欣赏并且仔细观察，深怕错过任何一个细节，我当时决定把这个时刻深深记录在脑海里并反复加深印象，以备将来再也遇不到了。后来这个「场景」的确帮助我度过了很多个艰难的夜晚。&lt;/p&gt;
&lt;p&gt;要训练这个区分能力没有想象那么难，但需要长期的刻意练习，大脑胡思乱想的时候很容易不自觉陷入「理性」部分，要想睡觉，就得避免。不要尝试去思考「why」。时刻对当前的大脑活动行为进行「鉴定」和归类。对事物分析、解释和总结类的事，躺着就不要去想；一旦躺下，就多回忆和假象一些「体会」和「感受」。需要额外注意，情感的大类里，有一种叫做「害怕」和「忧虑」的东西，也要特意避免，&lt;a href="https://blog.est.im/201905/stdin-004"&gt;Zizek说过 “The only emotion that doesn't deceive is anxiety”&lt;/a&gt;，焦虑是惟一不骗人的情感，这句话的意思是，焦虑的本质是理性和归因分析，而不是情感，所以它很「真」而且很「重」。入睡这种事就不要当「真」啦，想点轻松愉快的骗骗自己做个美梦不好么。&lt;/p&gt;
&lt;p&gt;对思绪的简单的二元分类并非我独创，&lt;a href="https://blog.est.im/2022/stdin-13"&gt;Popper的第三世界&lt;/a&gt; 和 &lt;a href="https://blog.est.im/2023/stderr-06"&gt;《思考快与慢》里 I、II型系统&lt;/a&gt;都有类似的阐述。这个入睡方法是我无意中实践出来的，可能是早年无聊特别喜欢对思辨本身进行思辨，二分模式归类，睡不着是因为大脑老是琢磨事，我无聊得琢磨起琢磨本身（meta-琢磨？），于是逐渐琢磨出一个辅助入睡规律。&lt;/p&gt;
&lt;p&gt;今天刚好看到另一个研究：&lt;a href="https://www.dedao.cn/share/course/article?id=R2Mo65zY4QZ3VnmYBYKqEdNAa98jGB"&gt;德国蒂宾根大学发现，合理利用睡眠，可以提升一个人的决策能力&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;研究过程是，招募一群8到11岁的孩子，给他们看一组很吓人的照片，比如凶猛的动物之类。当时，几乎所有的孩子都被吓到了。之后，把这些孩子分成两组，第一组让他们回去睡一觉。第二组，让他们通宵玩游戏。&lt;br /&gt;
第二天，再给这些孩子看这些可怕的照片。结果发现，睡觉组的孩子，可以相对平静地观看照片。他们显得没那么害怕了。而通宵游戏组的孩子，被惊吓程度，跟前一天几乎没有区别。&lt;br /&gt;
研究人员认为，这就是睡眠的作用。睡眠就像一个过滤器。当我们面对一件事时，大脑的逻辑系统和情感系统，会同时运转。比如，看到一条毒蛇。你既会产生逻辑上的识别，记住这条蛇的基本特征。同时，你也会产生情感层面的反应，也就是害怕。&lt;br /&gt;
而睡眠的作用，就在于，过滤掉其中情感的部分，保留逻辑的部分。因此，睡觉的孩子再看到蛇时，他们就不会那么害怕，只会记得，这条蛇昨天见过。而通宵组的孩子，这个害怕的感觉还在，他们再看到蛇时，还会很害怕。&lt;br /&gt;
这也是为什么，很多人晚上一上秤，发现自己胖了，发誓第二天早上要起来跑步。但第二天却起不来。这就是因为，你立flag时的激情，被睡眠给过滤掉了。这也是为什么有人说，睡前千万不要立flag。&lt;br /&gt;
把这个结论再延伸一步，研究人员认为，假如你做一件事时，在很大程度上受到情绪干扰，那么你最好先去睡一会儿。这能帮助你更好地集中注意力。&lt;br /&gt;
比如，要不要创业？不创业，觉得有点虚度青春。创业，又有点患得患失。这就是受情绪干扰太多。按照这个研究，你就应该先去睡一觉。让你的情绪脑先冷却下来，睡醒之后，再用你的逻辑脑仔细想想。&lt;br /&gt;
其实，这个研究可以用一句话概括，不就是，一日之计在于晨吗？也就是，把需要动用逻辑思考，需要计算，需要做计划的事情，尽量放在一觉睡醒之后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以睡觉就睡觉，别想那么多。自然就能睡得着了。本文也用来回答V站提问&lt;a href="https://v2ex.com/t/1023202"&gt;《如何在睡觉的时候不胡思乱想》&lt;/a&gt; 。 转载请注明来自est的博客 &lt;a href="https://blog.est.im/2024/stdout-05"&gt;https://blog.est.im/2024/stdout-05&lt;/a&gt; ，如果觉得对你有用，给我留一句评论是再好不过的了 😊 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">est</dc:creator><pubDate>Wed, 13 Mar 2024 13:25:11 +0800</pubDate><guid isPermaLink="false">tag:None,2024-03-13:/2024/stdout-05</guid><category>stdout</category></item></channel></rss>